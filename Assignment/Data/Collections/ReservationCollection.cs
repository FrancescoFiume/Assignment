using System.Reflection;
using Assignment.Data.Interfaces;
using Assignment.Data.Models;
using Microsoft.EntityFrameworkCore;

namespace Assignment.Data.Collections;
/// <summary>
/// Reservation Collection is a class that takes care of regrouping all the Reservations in the db and offers easy access to CRUD
/// operations.
/// </summary>
public class ReservationCollection:IObjectCollection<Reservations>
{
    //DI
    private readonly IServiceProvider _serviceProvider;
    //Private cache
    private  List<Reservations> _cache;
    //public cache
    /// <summary>
    /// The public chache doesn't have a setter for security reasons.
    /// It always reads either from the _cache or the Db
    /// </summary>
    public List<Reservations> Cache { get
    {
        using var scope = _serviceProvider.CreateScope();
        var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();

        if (!IsCacheUsed)
        {
            _cache = context.Reservations
                .Include(r=>r.Book)
                .Include(r=>r.Customer)
                .ToList();
            IsCacheUsed = true;
        }
        return _cache;
    } }
    /// <summary>
    /// The reasoning behind isChacheUsed it to have some sort of protection when the project is freshly started.<br />
    /// If I had cache.Count() to check if the cache was empty then if you add an item to the
    /// collection before having the cache to get the data from the db then you would be stuck with a cache of a lenght 1 which
    /// would never update its content.
    /// </summary>
    public bool IsCacheUsed { get; set; }
    /// <summary>
    /// Simple Contrusctor
    /// </summary>
    /// <param name="serviceProvider">
    ///Dependency Injected service provided is needed for context operations
    /// </param>
    public ReservationCollection(IServiceProvider serviceProvider)
    {
        _serviceProvider = serviceProvider;
        IsCacheUsed = false;
        _cache = new List<Reservations>();
    }
    /// <summary>
    /// GetById Takes an int and gives out the Item associated in the cache. or gives out an error.
    /// When first doesn't find anything it will throw an exception that will run to the controller and there
    /// it will be catched and managed with a not found response to the endpoint
    /// </summary>
    /// <param name="id">id of the element you want to find</param>
    /// <returns>If the id is in the db it returns the comeple object of the collection</returns>
    public Reservations GetById(int id)
    {
        return Cache.First(reservation => reservation.Id == id);
    }

    /// <summary>
    /// Add takes a Reservation class, disregards the Id, ReservationDate and Expiration Datecompletely
    /// then it creates a new entry in the db and 
    /// </summary>
    /// <param name="reservation"></param>
    /// <returns>gives back the item created with id the dates date</returns>
    public Reservations Add(Reservations reservation)
    {
        var newReservation = new Reservations()
        {
            //No Id, it gets generated by postgre serial
            CustomerId = reservation.CustomerId,
            BookId = reservation.BookId,
            //No ReservationDate and expirationDate for the same reason
        };
        using var scope = _serviceProvider.CreateScope();
        var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
        context.Reservations.Add(newReservation);
        context.SaveChanges();
        if (IsCacheUsed)
        {
            _cache.Add(newReservation);
        }
        return newReservation;
    }

    /// <summary>
    ///Takes in a Customer and changes all the values to the new values (except id and dates)
    /// </summary>
    /// <param name="item"></param>
    public void Update(Reservations item)
    {
        using var scope = _serviceProvider.CreateScope();
        var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();

        //can safely skip null checks, this parameter already passed the GetById check
        
        var reservationToUpdateDb = context.Reservations.Find(item.Id);
        
        Type userType = item.GetType();
        PropertyInfo[] properties = userType.GetProperties();
        foreach (var property in properties)
        {
            if (property.PropertyType == typeof(string) 
                && property.GetValue(item) as string != ""
                && property.Name != "ExpirationDate")
            {
                var toUpdateProperty = typeof(Reservations).GetProperty(property.Name);
                toUpdateProperty!.SetValue(reservationToUpdateDb, property.GetValue(item));

            }
        }
        context.SaveChanges();
        if (IsCacheUsed)
        {
            int index =_cache.FindIndex(r => r.Id == item.Id);
            _cache[index] = reservationToUpdateDb!;
        }
    }
/// <summary>
/// Change expiration date to custom date
/// </summary>
/// <param name="id">id of the reservation</param>
/// <param name="expirationDate">new expiration date</param>
    public void SetCustomExpiration(int id, DateTime expirationDate)
    {
        using var scope = _serviceProvider.CreateScope();
        var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
        var reservation = context.Reservations.Find(id);
        reservation!.ExpirationDate = expirationDate;
        context.SaveChanges();
        if (IsCacheUsed)
        {
            int index = _cache.FindIndex(r => r.Id == id);
            _cache[index] = reservation;
        }
    }
    

    /// <summary>
    /// Deletes an entry in both cache (if used) and bd from the id
    /// </summary>
    /// <param name="id"></param>
    public void Delete(int id)
    {
        using var scope = _serviceProvider.CreateScope();
        var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
        var toDelete = GetById(id);
        if (IsCacheUsed)
        {
            int index =_cache.FindIndex(c => c.Id == id);

            _cache.RemoveAt(index);
        }
        context.Reservations.Remove(toDelete);
        context.SaveChanges();
    }

    /// <summary>
    /// When the class is used as an Enumerable then it returns the cache's iterator
    /// </summary>
    /// <returns>
    ///If the cache has already been used, it returns _cache enumerator which is full, if it hasn't been used then it calls
    /// Cache so that the getter kicks in and reads the data from the db
    /// </returns>
    public IEnumerator<Reservations> GetEnumerator()
    {
        if (IsCacheUsed)
        {
            return _cache.GetEnumerator();
        }
        return Cache.GetEnumerator();
    }
}
using Assignment.Data.Interfaces;
using Assignment.Data.Models;
using Microsoft.EntityFrameworkCore;

namespace Assignment.Data.Collections;

public class CustomerCollection:IObjectCollection<Customers>
{
    //DI
    private readonly IServiceProvider _serviceProvider;
    //Private cache
    private List<Customers> _cache;
    //public cache
    /// <summary>
    /// The public chache doesn't have a setter for security reasons.
    /// It always reads either from the _cache or the Db
    /// </summary>
    public List<Customers> Cache
    {
        get
        {
            using (var scope = _serviceProvider.CreateScope())
            {
                var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();

                if (!IsCacheUsed)
                {
                    _cache = context.Customers.ToList();
                    IsCacheUsed = true;
                }
            }
            return _cache;
        }
       
    }
    public bool IsCacheUsed { get; set; }

    //Constr.
    public CustomerCollection(IServiceProvider serviceProvider)
    {
       _serviceProvider = serviceProvider;
    }
    
    /// <summary>
    /// GetById Takes an int and gives out the Item associated in the cache. or gives out an error
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
    public Customers GetById(int id)
    {
        //TODO: Check if the account is null and if so throw error
        return Cache.FirstOrDefault(customer => customer.Id == id);
    }
    /// <summary>
    /// Add takes a Customer class, and disregards the Id and the RegistrationDate completely
    /// then it creates a new entry in the db and 
    /// </summary>
    /// <param name="customer"></param>
    /// <returns>gives back the item created with id and registration date</returns>
    public Customers Add(Customers customer)
    {
        var newCustomer = new Customers()
        {
            //No Id, it gets generated by postgre serial
            FirstName = customer.FirstName,
            LastName = customer.LastName,
            Email = customer.Email,
            //No RegistrationDate for the same reason
        };
        using var scope = _serviceProvider.CreateScope();
        var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
        context.Customers.Add(newCustomer);
        context.SaveChanges();
        _cache.Add(newCustomer);
        return newCustomer;
    }

    /// <summary>
    ///Takes in a Customer and changes all the values to the new values (except id and registration)
    /// </summary>
    /// <param name="customer"></param>
    public void Update(Customers customer)
    {
        using var scope = _serviceProvider.CreateScope();
        var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
        
        var customerToUpdateCache = GetById(customer.Id);
        var customerToUpdateDb = context.Customers.FirstOrDefault(customer => customer.Id == customer.Id);
        
        if (customerToUpdateDb != null && customerToUpdateCache != null)
        {
            //cache update
            customerToUpdateCache.FirstName = customer.FirstName;
            customerToUpdateCache.LastName = customer.LastName;
            customerToUpdateCache.Email = customer.Email;
            
            //db update
            customerToUpdateDb.FirstName = customer.FirstName;
            customerToUpdateDb.LastName = customer.LastName;
            customerToUpdateDb.Email = customer.Email;
            context.SaveChanges();
        }
    }

    /// <summary>
    /// Deletes an entry in both cache and bd from the id
    /// </summary>
    /// <param name="id"></param>
    public void Delete(int id)
    {
        using var scope = _serviceProvider.CreateScope();
        var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
        var customerToDelete = context.Customers.FirstOrDefault(customer => customer.Id == id);
        
        _cache.Remove(customerToDelete);
        context.Customers.Remove(customerToDelete);
        context.SaveChanges();
    }

    public IEnumerator<Customers> GetEnumerator()
    {
        if (IsCacheUsed)
        {
            return _cache.GetEnumerator();
        }
        return Cache.GetEnumerator();
    }
}